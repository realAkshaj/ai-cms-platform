// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users      User[]
  content    Content[]
  aiAnalysis AIAnalysis[] // ðŸ¤– ADDED THIS LINE

  @@map("organizations")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  content      Content[]

  @@map("users")
}

model Content {
  id             String        @id @default(cuid())
  title          String
  slug           String
  excerpt        String?
  body           String        @db.Text // This is the main content field
  status         ContentStatus @default(DRAFT)
  type           ContentType   @default(ARTICLE)
  featuredImage  String?
  seoTitle       String?
  seoDescription String?
  tags           String[]      @default([])
  publishedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  authorId       String
  organizationId String
  author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  aiAnalysis     AIAnalysis[] // ðŸ¤– ADDED THIS LINE

  // Analytics (optional - you can remove these if you don't want them)
  views  Int @default(0)
  likes  Int @default(0)
  shares Int @default(0)

  // Indexes for performance
  @@unique([slug, organizationId])
  @@index([organizationId, status])
  @@index([authorId])
  @@index([publishedAt])
  @@map("content")
}

model AIAnalysis {
  id        String   @id @default(cuid())
  type      String // 'CONTENT_GENERATION', 'IMPROVEMENT', 'IDEAS'
  input     String   @db.Text
  output    String   @db.Text
  createdAt DateTime @default(now())

  // Optional relationships
  contentId      String?
  content        Content?     @relation(fields: [contentId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("ai_analysis")
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentType {
  POST
  PAGE
  ARTICLE
  NEWSLETTER
}
